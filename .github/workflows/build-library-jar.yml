name: Build and Release Library

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write   # Required for OIDC provenance signing
  contents: write   # Required for uploading provenance
  actions: read

jobs:
  build-library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Change wrapper permissions
        run: chmod +x pi4micronaut-utils/gradlew

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          build-root-directory: pi4micronaut-utils/

      - name: Execute Gradle build with info logging
        working-directory: pi4micronaut-utils
        run: ./gradlew build --info

      - name: Execute Gradle shadowJar
        working-directory: pi4micronaut-utils
        run: ./gradlew shadowJar

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: pi4micronaut-jar
          path: pi4micronaut-utils/build/libs/*.jar

      # ðŸ”‘ Generate SLSA provenance for the built JAR
      - name: Generate SLSA Provenance
        uses: slsa-framework/slsa-github-generator/actions/attest-build-provenance@v2.1.0
        with:
          subject-path: "pi4micronaut-utils/build/libs/*.jar"

  publish-jar:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build-library
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x pi4micronaut-utils/gradlew

      - name: Publish Library
        working-directory: pi4micronaut-utils
        env:
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
        run: ./gradlew clean publish --info
